class Solution {
public:
    char kthCharacter(long long k, vector<int>& operations) {
        // Initially, the string is "a" (length 1), and its character shift is 0
        long long length = 1;  // Current length of the string
        int totalOps = 0;      // Total operations until string length >= k

        // First: determine how many operations (from the start) are needed
        // to grow the string to at least length k
        while (length < k) {
            length *= 2;  // Each operation doubles the string length
            totalOps++;
        }

        // Decrement k to make it 0-based for indexing
        k--;

        // We'll track how many times the characters at position k
        // would have been incremented due to operation type 1
        int characterShift = 0;

        // Process operations in reverse (from last to first that affected length)
        for (int i = totalOps - 1; i >= 0; --i) {
            // After this operation, the string was of size `length`
            // Before this operation, it was of size `length / 2`

            if (k >= length / 2) {
                // We're in the *second half* of the string generated by this op
                if (operations[i] == 1) {
                    // If op[i] == 1, the second half is incremented by 1 alphabetically
                    // Example: "a" â†’ "ab"
                    characterShift++;
                }
                // Move to equivalent index in the first half
                k -= length / 2;
            }

            // Go to the previous state where string was half the size
            length /= 2;
        }

        // Return the final character after all shifts
        // Modulo 26 because 'z'+1 should go to 'a'
        return (characterShift % 26 + 'a');
    }
};